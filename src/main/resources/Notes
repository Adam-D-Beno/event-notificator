1. Какое время считать: Включите в сущность дату создания нотификации

2. Error Handling: Обработка ошибок и управление исключениями при работе с Kafka.

3. при вставке таблицы registrations_on_event делает 3 запроса отдельный



@Bean
    public ProducerFactory<Long, Object> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:19092,localhost:19093,localhost:19094");
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        configProps.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, "true");
        return new DefaultKafkaProducerFactory<>(configProps);
    }

 @Bean
     public KafkaTemplate<Long, Object> kafkaTemplate(
             ProducerFactory<Long, Object> producerFactory
    ) {
        return new KafkaTemplate<>(producerFactory);
    }



    DeadLetterPublishingRecoverer publishingRecoverer = new DeadLetterPublishingRecoverer(
                        kafkaTemplate, (record, ex) ->
                        new TopicPartition("change-event-topic.DLT", record.partition())
                );
    DefaultErrorHandler errorHandler = new DefaultErrorHandler(
                   publishingRecoverer,
                   new FixedBackOff(1000L, 3)
           );
               containerFactory.setCommonErrorHandler(errorHandler);



    @GetMapping("/test")
    public ResponseEntity<String> test(
            @AuthenticationPrincipal CustomUserDetail customUserDetail
    ) {
        EventChangeKafkaMessage changeKafkaMessage = EventChangeKafkaMessage.builder()
                .eventId(1L)
                .modifierById(1L)
                .ownerEventId(1L)
                .name(new EventFieldGeneric<>("oldName", "newName"))
                .maxPlaces(new EventFieldGeneric<>(10, 20))
                .date(new EventFieldGeneric<>(LocalDateTime.now(), LocalDateTime.now()))
                .cost(new EventFieldGeneric<>(BigDecimal.ONE, BigDecimal.TEN))
                .duration(new EventFieldGeneric<>(10, 60))
                .locationId(new EventFieldGeneric<>(8L, 10L))
                .status(new EventFieldGeneric<>(EventStatus.WAIT_START, EventStatus.STARTED))
                .registrationsOnEvent(List.of(1L, 2L, 3L))
                .build();
        notificationService.save(changeKafkaMessage);
        log.info("ID пользователя={}, login={}, role={}",
                customUserDetail.getId(),customUserDetail.getUsername(),
                customUserDetail.getAuthorities().toString());
        return ResponseEntity.ok("Its work");
    }